networks:
  sdet360-network:
    driver: bridge
  default:
    name: sdet360-network
    driver: bridge

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: sdet360-postgres
    environment:
      POSTGRES_DB: mastersdet360
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
    networks:
      - sdet360-network
    expose:
      - "5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Proto Compiler Service (using a lightweight Python image)
  proto-compiler:
    image: python:3.11-alpine
    container_name: sdet360-proto-compiler
    volumes:
      - ./proto:/proto
      - ./springboot-service/src/main/java:/java-output
      - ./ai-service/app/generated:/python-output
    command: >
      /bin/sh -c "apk add --no-cache protobuf-dev=3.25.3-r1 && \
                  echo 'Creating Java output directory...' && \
                  mkdir -p /java-output/com/sdet/sdet360/grpc/generated && \
                  echo 'Generating Java code...' && \
                  protoc --java_out=/java-output \
                         --proto_path=/proto \
                         /proto/ai_service.proto && \
                  echo 'Creating Python output directory...' && \
                  mkdir -p /python-output && \
                  touch /python-output/__init__.py && \
                  echo 'Installing Python dependencies...' && \
                  pip install --no-cache-dir grpcio-tools==1.58.0 && \
                  echo 'Generating Python code...' && \
                  python3 -m grpc_tools.protoc \
                         -I=/proto \
                         --python_out=/python-output \
                         --grpc_python_out=/python-output \
                         /proto/ai_service.proto && \
                  echo 'Proto compilation completed successfully!'"

  # Spring Boot Service
  springboot-service:
    build:
      context: .
      dockerfile: springboot-service/Dockerfile
    container_name: sdet360-springboot
    networks:
      - sdet360-network
    ports:
      - "8081:8080"
    expose:
      - "8080"
    depends_on:
      postgres:
        condition: service_healthy
      proto-compiler:
        condition: service_completed_successfully
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mastersdet360
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 12345
      FASTAPI_GRPC_HOST: ai-service
      FASTAPI_GRPC_PORT: 50051
    volumes:
      - ./springboot-service:/app
      - ./springboot-service/src/main/java:/app/src/main/java:ro
    extra_hosts:
      - "tenant1.localhost:127.0.0.1"

  # AI Service (FastAPI + gRPC)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: sdet360-ai
    networks:
      - sdet360-network
    expose:
      - "8000"
      - "50051"
    depends_on:
      proto-compiler:
        condition: service_completed_successfully
    volumes:
      - ./ai-service/app/generated:/app/app/generated:ro

  # Angular Frontend
  frontend:
    build:
      context: ./SDETAIO
      dockerfile: Dockerfile
    container_name: sdet360-frontend
    # Use container names directly in the same network
    environment:
      - NG_APP_API_URL=http://springboot-service:8080
    ports:
      - "4201:80"
    networks:
      - sdet360-network
    depends_on:
      - springboot-service
    restart: unless-stopped
    # Add hostname mapping for tenant resolution
    extra_hosts:
      - "tenant1.localhost:127.0.0.1"

volumes:
  postgres-data:
