import { HttpClient, HttpErrorResponse, HttpHeaders } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { environment } from "../../../environments/environment.development";
import { Router } from "@angular/router";
import { ApiService } from "./api.service";
import { AuthService } from "./authentication/auth.service";
import { catchError, map, Observable, of, tap } from "rxjs";
import { response } from "express";

let epicsampleResponse = {
  "kan-5": {
    "KAN-8": {
      "aiResponse": "Here is a comprehensive list of test cases for the given epics:\n\n**1. Submitting Decisions**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-01-SD | Successful submission | Player logged in, navigation to decision submission page | Enter decisions, submit | Submission successful, confirmation message displayed |\n\n**2. Confirmation of Submission**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-02-CS | Successful submission confirmed | Player has submitted decisions, navigation to decision submission page | Verify confirmation message displayed | Confirmation message displayed |\n\n**3. View Submitted Decisions**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-03-VSD | Viewing previously submitted decisions | Player has submitted decisions, navigation to decision submission page | Verify previous submissions displayed | Previous submissions displayed |\n\n**4. Resubmit Decisions**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-04-RS | Attempting to resubmit previously submitted decisions | Player has already submitted decisions, editing and resubmitting | Attempt to make changes, submit | Error message displayed, \"Duplicate submission detected\" |\n\n**5. Submit Decisions within Timeframe**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-05-SDT | Successful submission within timeframe | Player is on decision submission page, within allocated timeframe | Enter decisions, submit | Submission accepted |\n\n**6. Submission Without Completing All Fields**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-06-SWC | Attempting to submit without completing all fields | Player is on decision submission page, missing required fields | Try to submit | Error message displayed, \"Please complete all required fields before submitting\" |\n\n**7. Submit After Timeframe**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-07-SAT | Attempting to submit after timeframe has expired | Player is on decision submission page, after allocated timeframe has expired | Try to submit | Error message displayed, \"Submission time has expired. Please contact the facilitator\" |\n\n**8. Duplicate Submission**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-08-DS | Attempting to submit duplicate decisions without changes | Player has already submitted decisions, attempting to resubmit same decisions | Try to resubmit | Error message displayed, \"Duplicate submission detected. No changes made to your decisions\" |\n\n**9. Invalid Data Format**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-09-IDF | Entering data in invalid format | Player is on decision submission page, entering invalid data | Try to submit | Error message displayed, \"Invalid data format. Please correct the highlighted fields\" |\n\n**10. Network Interruption During Submission**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-10-NID | Simulating network interruption during submission process | Player is on decision submission page, simulating network interruption | Try to submit | Error message displayed, \"Network error. Please try submitting again\" |\n\n**11. Missing Required Fields**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-11-MRF | Attempting to submit without completing required fields | Player is on decision submission page, missing required fields | Try to submit | Error message displayed, \"All required fields must be filled out to submit your decisions\" |\n\n**12. Timeout Error**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-12-TE | Simulating submission process taking too long due to server issues | Player is on decision submission page, simulating server issues | Try to submit | Error message displayed, \"Submission timed out. Please try again later\" |\n\n**13. Submission Response Time**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-13-SRT | Measuring submission response time | Player is on decision submission page, submitting decisions | Measure response time | Response time within 2 seconds |\n\n**14. Page Load Time**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-14-PLT | Measuring page load time | Player navigates to decision submission page | Measure load time | Page loads within 3 seconds |\n\n**15. Handling Concurrent Submissions**\n\n| **Test Case ID** | **Description** | **Preconditions** | **Test Steps** | **Expected Results** |\n| --- | --- | --- | --- | --- |\n| TC-15-HCS | Simulating multiple players submitting decisions simultaneously | Multiple players submit decisions simultaneously | Measure system performance | System handles submissions without performance degradation or errors |\n\nNote: These test cases cover various scenarios and edge cases, but additional test cases may be necessary to ensure comprehensive coverage."
    }
  },

  "kan-2": {
    "KAN-3": {
      "aiResponse": "Here are the detailed test cases for each scenario:\n\n**1. Successful Login with Valid Credentials**\n\n* **Preconditions:** User is on the login page.\n* **Description:** Verify that user can log in successfully using valid credentials.\n* **Test Steps:**\n\t1. Enter a valid username and password.\n\t2. Click the login button.\n* **Expected Results:**\n\t1. The user should be redirected to the landing page of the simulation.\n\n**2. Password Masking**\n\n* **Preconditions:** User is on the login page.\n* **Description:** Verify that password input is masked (hidden from view).\n* **Test Steps:**\n\t1. Enter a password in the password field.\n\t2. Observe the password field to ensure it is masked.\n* **Expected Results:**\n\t1. The password should be hidden from view.\n\n**3. Field Validation on Submit**\n\n* **Preconditions:** User is on the login page.\n* **Description:** Verify that error messages are displayed when user clicks login without entering any credentials.\n* **Test Steps:**\n\t1. Click the login button without entering any credentials.\n* **Expected Results:**\n\t1. Error messages should be displayed under the respective fields indicating that they are required.\n\n**4. Invalid Credentials**\n\n* **Preconditions:** User is on the login page.\n* **Description:** Verify that error message is displayed when user enters invalid username or password.\n* **Test Steps:**\n\t1. Enter an invalid username or password.\n\t2. Click the login button.\n* **Expected Results:**\n\t1. An error message should be displayed indicating that the username or password is incorrect.\n\n**5. Empty Username**\n\n* **Preconditions:** User is on the login page.\n* **Description:** Verify that error message is displayed when user leaves username field empty.\n* **Test Steps:**\n\t1. Leave the username field empty.\n\t2. Click the login button.\n* **Expected Results:**\n\t1. An error message should be displayed indicating that the username field is required.\n\n**6. Empty Password**\n\n* **Preconditions:** User is on the login page.\n* **Description:** Verify that error message is displayed when user leaves password field empty.\n* **Test Steps:**\n\t1. Leave the password field empty.\n\t2. Click the login button.\n* **Expected Results:**\n\t1. An error message should be displayed indicating that the password field is required.\n\n**7. SQL Injection Attempt**\n\n* **Preconditions:** User is on the login page.\n* **Description:** Verify that system prevents SQL injection attempts and displays an error message.\n* **Test Steps:**\n\t1. Enter an SQL injection string in the username or password field.\n\t2. Click the login button.\n* **Expected Results:**\n\t1. An error message should be displayed indicating invalid credentials.\n\t2. The attempt should be logged for security review.\n\n**8. Cross-Site Scripting (XSS) Attempt**\n\n* **Preconditions:** User is on the login page.\n* **Description:** Verify that system prevents XSS attempts and displays an error message.\n* **Test Steps:**\n\t1. Enter a script tag in the username or password field.\n\t2. Click the login button.\n* **Expected Results:**\n\t1. An error message should be displayed indicating invalid input.\n\t2. The attempt should be logged for security review.\n\n**9. Password Field Visibility Toggle**\n\n* **Preconditions:** User is on the login page.\n* **Description:** Verify that user can toggle password field visibility.\n* **Test Steps:**\n\t1. Click the \"Show Password\" button/icon.\n\t2. Observe the password field to ensure it is displayed in plain text.\n\t3. Click the \"Hide Password\" button/icon.\n\t4. Observe the password field to ensure it is masked again.\n* **Expected Results:**\n\t1. The password should be displayed in plain text when the \"Show Password\" button/icon is clicked.\n\t2. The password should be masked again when the \"Hide Password\" button/icon is clicked.\n\n**10. Account Lockout After Multiple Failed Attempts**\n\n* **Preconditions:** User is on the login page.\n* **Description:** Verify that account is locked after multiple failed attempts and displays an error message.\n* **Test Steps:**\n\t1. Enter invalid credentials multiple times (e.g., 5 times).\n\t2. Click the login button each time.\n* **Expected Results:**\n\t1. The account should be locked.\n\t2. An error message should be displayed indicating that the account is locked.\n\t3. The user should be prompted to contact support or follow the account recovery process.\n\n**11. Expired Account**\n\n* **Preconditions:** User is on the login page.\n* **Description:** Verify that error message is displayed when user tries to log in with an expired account.\n* **Test Steps:**\n\t1. Try to log in with an expired account.\n\t2. Click the login button.\n* **Expected Results:**\n\t1. An error message should be displayed indicating \"Your account has expired. Please contact support to reactivate your account.\"\n\n**12. Page Load Time**\n\n* **Preconditions:** User is on the login page.\n* **Description:** Verify that page load time is less than 2 seconds.\n* **Test Steps:**\n\t1. Measure the page load time when user is on the login page.\n* **Expected Results:**\n\t1. The page load time should be less than 2 seconds.\n\n**13. Login Response Time**\n\n* **Preconditions:** User is on the login page.\n* **Description:** Verify that response time for successful login is less than 3 seconds.\n* **Test Steps:**\n\t1. Enter valid credentials and click the login button.\n\t2. Measure the response time after clicking the login button.\n* **Expected Results:**\n\t1. The response time for successful login should be less than 3 seconds.\n\n**14. Concurrent Login Attempts**\n\n* **Preconditions:** Multiple users are on the login page.\n* **Description:** Verify that system handles concurrent login attempts without performance degradation.\n* **Test Steps:**\n\t1. Have 100 users attempt to log in simultaneously.\n* **Expected Results:**\n\t1. The system should handle concurrent login attempts without performance degradation.\n\n**15. System Stability Under Load**\n\n* **Preconditions:** Multiple users are using the application.\n* **Description:** Verify that system remains stable and responsive under load.\n* **Test Steps:**\n\t1. Have 500 users logged in simultaneously.\n* **Expected Results:**\n\t1. The system should remain stable and responsive.\n\n**16. Database Query Performance**\n\n* **Preconditions:** User is on the login page.\n* **Description:** Verify that database queries for authentication execute within acceptable time limits.\n* **Test Steps:**\n\t1. Enter credentials and click login.\n\t2. Measure the execution time of database queries for authentication.\n* **Expected Results:**\n\t1. Database queries for authentication should be optimized to execute within acceptable time limits (e.g., less than 500 milliseconds).\n\nI hope this helps! Let me know if you have any further questions or need additional assistance."
    },

    "KAN-9": {
      "aiResponse": "Here is a comprehensive list of ordered test cases for the given Epics:\n\n**1. Requesting Password Reset Link**\n\n* **Precondition:** User is on the login page\n* **Description:** Verifies that clicking the \"Forgot Password\" link redirects to the Forgot Password page.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link.\n\t3. Verify that the user is redirected to the Forgot Password page.\n* **Expected Results:** The user should be redirected to the Forgot Password page.\n\n**2. Submitting Registered Email Address**\n\n* **Precondition:** User is on the Forgot Password page\n* **Description:** Verifies that submitting a registered email address displays a confirmation message.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter a registered email address in the input field.\n\t4. Click the \"Submit\" button.\n\t5. Verify that a confirmation message is displayed stating, \"A password reset link has been sent to your email.\"\n* **Expected Results:** A confirmation message should be displayed stating, \"A password reset link has been sent to your email.\"\n\n**3. Receiving Password Reset Email**\n\n* **Precondition:** User has requested a password reset\n* **Description:** Verifies that the system sends a password reset email.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter a registered email address in the input field.\n\t4. Click the \"Submit\" button.\n\t5. Verify that an email is sent to the entered email address with a password reset link.\n* **Expected Results:** The user should receive an email with a password reset link within a few minutes.\n\n**4. Using the Password Reset Link**\n\n* **Precondition:** User has received the password reset email\n* **Description:** Verifies that clicking on the reset link redirects to the password reset page.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter a registered email address in the input field.\n\t4. Click the \"Submit\" button.\n\t5. Verify that an email is sent to the entered email address with a password reset link.\n\t6. Open the received email and click on the password reset link.\n\t7. Verify that the user is redirected to the password reset page.\n* **Expected Results:** The user should be redirected to the password reset page.\n\n**5. Resetting the Password**\n\n* **Precondition:** User is on the password reset page\n* **Description:** Verifies that resetting a new password displays a confirmation message.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter a registered email address in the input field.\n\t4. Click the \"Submit\" button.\n\t5. Verify that an email is sent to the entered email address with a password reset link.\n\t6. Open the received email and click on the password reset link.\n\t7. Verify that the user is redirected to the password reset page.\n\t8. Enter a new password in the input field.\n\t9. Confirm the new password by re-entering it in the confirmation field.\n\t10. Click the \"Submit\" button.\n\t11. Verify that a confirmation message is displayed stating, \"Your password has been reset successfully.\"\n* **Expected Results:** The password should be successfully reset, and a confirmation message should be displayed stating, \"Your password has been reset successfully.\"\n\n**6. Unregistered Email Address**\n\n* **Precondition:** User is on the Forgot Password page\n* **Description:** Verifies that submitting an unregistered email address displays an error message.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter an unregistered email address in the input field.\n\t4. Click the \"Submit\" button.\n\t5. Verify that an error message is displayed stating, \"This email address is not registered in our system.\"\n* **Expected Results:** An error message should be displayed stating, \"This email address is not registered in our system.\"\n\n**7. Invalid Email Format**\n\n* **Precondition:** User is on the Forgot Password page\n* **Description:** Verifies that submitting an invalid email format displays an error message.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter an invalid email address in the input field (e.g., abc@def).\n\t4. Click the \"Submit\" button.\n\t5. Verify that an error message is displayed stating, \"Please enter a valid email address.\"\n* **Expected Results:** An error message should be displayed stating, \"Please enter a valid email address.\"\n\n**8. Expired Password Reset Link**\n\n* **Precondition:** User has received the password reset email\n* **Description:** Verifies that clicking on an expired link displays an error message.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter a registered email address in the input field.\n\t4. Click the \"Submit\" button.\n\t5. Verify that an email is sent to the entered email address with a password reset link.\n\t6. Open the received email and click on the password reset link after it has expired (e.g., wait for 10 minutes).\n\t7. Verify that an error message is displayed stating, \"This password reset link has expired. Please request a new one.\"\n* **Expected Results:** An error message should be displayed stating, \"This password reset link has expired. Please request a new one.\"\n\n**9. Reusing Password Reset Link**\n\n* **Precondition:** User has already used the password reset link\n* **Description:** Verifies that attempting to use the same link again displays an error message.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter a registered email address in the input field.\n\t4. Click the \"Submit\" button.\n\t5. Verify that an email is sent to the entered email address with a password reset link.\n\t6. Open the received email and click on the password reset link.\n\t7. Reset the new password successfully.\n\t8. Attempt to use the same password reset link again by clicking on it in the email.\n\t9. Verify that an error message is displayed stating, \"This password reset link has already been used. Please request a new one if needed.\"\n* **Expected Results:** An error message should be displayed stating, \"This password reset link has already been used. Please request a new one if needed.\"\n\n**10. Weak New Password**\n\n* **Precondition:** User is on the password reset page\n* **Description:** Verifies that submitting a weak new password displays an error message.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter a registered email address in the input field.\n\t4. Click the \"Submit\" button.\n\t5. Verify that an email is sent to the entered email address with a password reset link.\n\t6. Open the received email and click on the password reset link.\n\t7. Verify that the user is redirected to the password reset page.\n\t8. Enter a weak new password in the input field (e.g., abc123).\n\t9. Confirm the weak new password by re-entering it in the confirmation field.\n\t10. Click the \"Submit\" button.\n\t11. Verify that an error message is displayed stating, \"Your password must be at least 8 characters long and include a mix of letters, numbers, and special characters.\"\n* **Expected Results:** An error message should be displayed stating, \"Your password must be at least 8 characters long and include a mix of letters, numbers, and special characters.\"\n\n**11. Invalid Email Entry**\n\n* **Precondition:** User is on the Forgot Password page\n* **Description:** Verifies that submitting an invalid email address displays an error message.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter an invalid email address in the input field (e.g., abc def).\n\t4. Click the \"Submit\" button.\n\t5. Verify that an error message is displayed stating, \"Please enter a valid email address.\"\n* **Expected Results:** An error message should be displayed stating, \"Please enter a valid email address.\"\n\n**12. Non-Registered Email**\n\n* **Precondition:** User is on the Forgot Password page\n* **Description:** Verifies that submitting an unregistered email address displays an error message.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter an unregistered email address in the input field.\n\t4. Click the \"Submit\" button.\n\t5. Verify that an error message is displayed stating, \"This email address is not registered in our system.\"\n* **Expected Results:** An error message should be displayed stating, \"This email address is not registered in our system.\"\n\n**13. Link Expiration Notice**\n\n* **Precondition:** User clicks on an expired password reset link\n* **Description:** Verifies that clicking on an expired link displays an error message.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter a registered email address in the input field.\n\t4. Click the \"Submit\" button.\n\t5. Verify that an email is sent to the entered email address with a password reset link.\n\t6. Open the received email and click on the password reset link after it has expired (e.g., wait for 10 minutes).\n\t7. Verify that an error message is displayed stating, \"This password reset link has expired. Please request a new one.\"\n* **Expected Results:** An error message should be displayed stating, \"This password reset link has expired. Please request a new one.\"\n\n**14. Weak Password Entry**\n\n* **Precondition:** User is on the password reset page\n* **Description:** Verifies that submitting a weak new password displays an error message.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter a registered email address in the input field.\n\t4. Click the \"Submit\" button.\n\t5. Verify that an email is sent to the entered email address with a password reset link.\n\t6. Open the received email and click on the password reset link.\n\t7. Verify that the user is redirected to the password reset page.\n\t8. Enter a weak new password in the input field (e.g., abc123).\n\t9. Confirm the weak new password by re-entering it in the confirmation field.\n\t10. Click the \"Submit\" button.\n\t11. Verify that an error message is displayed stating, \"Your password must be at least 8 characters long and include a mix of letters, numbers, and special characters.\"\n* **Expected Results:** An error message should be displayed stating, \"Your password must be at least 8 characters long and include a mix of letters, numbers, and special characters.\"\n\n**15. Password Reset Email Delivery Time**\n\n* **Precondition:** User has requested a password reset\n* **Description:** Verifies that the system sends the reset email within 2 minutes.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter a registered email address in the input field.\n\t4. Click the \"Submit\" button.\n\t5. Verify that an email is sent to the entered email address with a password reset link within 2 minutes.\n* **Expected Results:** The system should send the reset email within 2 minutes.\n\n**16. Page Load Time for Reset Page**\n\n* **Precondition:** User clicks on the password reset link\n* **Description:** Verifies that the password reset page loads quickly.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter a registered email address in the input field.\n\t4. Click the \"Submit\" button.\n\t5. Verify that an email is sent to the entered email address with a password reset link.\n\t6. Open the received email and click on the password reset link.\n\t7. Measure the time it takes for the password reset page to load.\n* **Expected Results:** The password reset page should load quickly (e.g., within 5 seconds).\n\n**17. User Experience**\n\n* **Precondition:** User is attempting to reset their password\n* **Description:** Verifies that the user experience is smooth and intuitive.\n* **Test Steps:**\n\t1. Open the application and navigate to the login page.\n\t2. Click on the \"Forgot Password\" link and verify that it redirects to the Forgot Password page.\n\t3. Enter a registered email address in the input field.\n\t4. Click the \"Submit\" button.\n\t5. Verify that an email is sent to the entered email address with a password reset link.\n\t6. Open the received email and click on the password reset link.\n\t7. Verify that the user is redirected to the password reset page.\n\t8. Enter a new password in the input field.\n\t9. Confirm the new password by re-entering it in the confirmation field.\n\t10. Click the \"Submit\" button.\n\t11. Measure the time it takes for the password reset process to complete.\n* **Expected Results:** The user experience should be smooth and intuitive, with no errors or issues during the password reset process.\n\nNote: These test cases are not exhaustive and you may need to add more based on your specific requirements. Additionally, you can modify these test cases as per your convenience."
    }
  }
}

let sampleresponse = {
  "KAN-36": {
    "summary": "Password requirements not being enforced",
    "description": "# KAN-36: Password requirements not being enforced\n\n\n## **Password requirements not being enforced**\n\n\n- \n  **Steps to reproduce:**Attempt to create a new account with a password that does not meet the password requirements\n\n- \n  **Actual result:**\nThe account is created successfully\n\n\n- \n  **Expected result:**\nAn error message is displayed indicating that the password does not meet the requirements\n\n\n",
    "aiResponse": "Here are the ordered list of test cases for Bug KAN-36:\n\n**Test Case 1: Password meets minimum length requirement**\n\n* **Precondition:** The password requirements are set to require a minimum length of 8 characters.\n* **Description:** Test that an account can be created with a password that meets the minimum length requirement.\n* **Test Steps:**\n\t1. Go to the registration page\n\t2. Enter a password that is at least 8 characters long (e.g. \"password123\")\n\t3. Attempt to create a new account\n* **Expected Result:** The account is created successfully.\n\n**Test Case 2: Password does not meet minimum length requirement**\n\n* **Precondition:** The password requirements are set to require a minimum length of 8 characters.\n* **Description:** Test that an error message is displayed when attempting to create an account with a password that does not meet the minimum length requirement.\n* **Test Steps:**\n\t1. Go to the registration page\n\t2. Enter a password that is less than 8 characters long (e.g. \"password\")\n\t3. Attempt to create a new account\n* **Expected Result:** An error message is displayed indicating that the password does not meet the length requirement.\n\n**Test Case 3: Password meets minimum complexity requirement**\n\n* **Precondition:** The password requirements are set to require at least one uppercase letter, one lowercase letter, and one digit.\n* **Description:** Test that an account can be created with a password that meets the minimum complexity requirement.\n* **Test Steps:**\n\t1. Go to the registration page\n\t2. Enter a password that contains at least one uppercase letter (e.g. \"Password123\"), one lowercase letter (e.g. \"password123\"), and one digit (e.g. \"password1234\")\n\t3. Attempt to create a new account\n* **Expected Result:** The account is created successfully.\n\n**Test Case 4: Password does not meet minimum complexity requirement**\n\n* **Precondition:** The password requirements are set to require at least one uppercase letter, one lowercase letter, and one digit.\n* **Description:** Test that an error message is displayed when attempting to create an account with a password that does not meet the minimum complexity requirement.\n* **Test Steps:**\n\t1. Go to the registration page\n\t2. Enter a password that contains only lowercase letters (e.g. \"password\")\n\t3. Attempt to create a new account\n* **Expected Result:** An error message is displayed indicating that the password does not meet the complexity requirements.\n\n**Test Case 5: Password meets maximum length requirement**\n\n* **Precondition:** The password requirements are set to allow a maximum length of 20 characters.\n* **Description:** Test that an account can be created with a password that meets the maximum length requirement.\n* **Test Steps:**\n\t1. Go to the registration page\n\t2. Enter a password that is at least 20 characters long (e.g. \"password1234567890\")\n\t3. Attempt to create a new account\n* **Expected Result:** The account is created successfully.\n\n**Test Case 6: Password does not meet maximum length requirement**\n\n* **Precondition:** The password requirements are set to allow a maximum length of 20 characters.\n* **Description:** Test that an error message is displayed when attempting to create an account with a password that exceeds the maximum length requirement.\n* **Test Steps:**\n\t1. Go to the registration page\n\t2. Enter a password that is more than 20 characters long (e.g. \"password1234567890123456\")\n\t3. Attempt to create a new account\n* **Expected Result:** An error message is displayed indicating that the password exceeds the maximum length.\n\n**Test Case 7: Password contains invalid characters**\n\n* **Precondition:** The password requirements do not allow special characters.\n* **Description:** Test that an error message is displayed when attempting to create an account with a password that contains invalid characters.\n* **Test Steps:**\n\t1. Go to the registration page\n\t2. Enter a password that contains special characters (e.g. \"password!@#\")\n\t3. Attempt to create a new account\n* **Expected Result:** An error message is displayed indicating that the password contains invalid characters.\n\n**Test Case 8: Password is an exact match with username**\n\n* **Precondition:** The password requirements do not allow passwords to be an exact match with the username.\n* **Description:** Test that an error message is displayed when attempting to create an account with a password that is an exact match with the username.\n* **Test Steps:**\n\t1. Go to the registration page\n\t2. Enter a username and password that are the same (e.g. \"username\" and \"username\")\n\t3. Attempt to create a new account\n* **Expected Result:** An error message is displayed indicating that the password cannot be an exact match with the username.\n\nThese test cases cover various scenarios, including meeting and not meeting requirements for length, complexity, maximum length, invalid characters, and matching with the username."
  },
  "KAN-35": {
    "summary": "User able to login with deactivated account",
    "description": "# KAN-35: User able to login with deactivated account\n\n\n## **User able to login with deactivated account**\n\n\n- \n  **Steps to reproduce:**Deactivate a user accountAttempt to log in with the deactivated account\n\n- \n  **Actual result: **\nThe user is able to log in successfully\n\n\n- \n  **Expected result:**\nThe user is unable to log in and receives an error message indicating that the account is deactivated\n\n\n",
    "aiResponse": "Here are some ordered test cases for KAN-35:\n\n### 1. **Deactivated Account Login - Successful**\n\n*   **Precondition:** A user account is deactivated.\n*   **Description:** Test that a user cannot log in with a deactivated account.\n*   **Test Steps:**\n    1.  Create a new user account and deactivate it (e.g., through the admin panel).\n    2.  Attempt to log in with the deactivated account using valid credentials.\n    3.  Verify that the login attempt fails and displays an error message indicating that the account is deactivated.\n\n*   **Expected Results:**\n    *   The login attempt should fail.\n    *   An error message should be displayed indicating that the account is deactivated.\n    *   The user should not be logged in successfully.\n\n### 2. **Deactivated Account Login - Invalid Credentials**\n\n*   **Precondition:** A user account is deactivated.\n*   **Description:** Test that a user with invalid credentials cannot log in with a deactivated account.\n*   **Test Steps:**\n    1.  Create a new user account and deactivate it (e.g., through the admin panel).\n    2.  Attempt to log in with the deactivated account using invalid credentials.\n    3.  Verify that the login attempt fails due to incorrect credentials.\n\n*   **Expected Results:**\n    *   The login attempt should fail.\n    *   An error message should be displayed indicating that the username or password is incorrect.\n    *   The user should not be logged in successfully.\n\n### 3. **Deactivated Account Login - Re-enable Account**\n\n*   **Precondition:** A user account is deactivated and then re-enabled.\n*   **Description:** Test that a user can log in after re-enabling their account.\n*   **Test Steps:**\n    1.  Create a new user account, deactivate it (e.g., through the admin panel), and then reactivate it.\n    2.  Attempt to log in with the re-enabled account using valid credentials.\n\n*   **Expected Results:**\n    *   The login attempt should succeed.\n    *   An error message indicating that the account is deactivated should not be displayed.\n    *   The user should be logged in successfully.\n\n### 4. **Account Deactivation - Concurrent Requests**\n\n*   **Precondition:** A user account is being deactivated, and multiple concurrent requests to log in are made.\n*   **Description:** Test the behavior when multiple users attempt to log in with a deactivated account concurrently.\n*   **Test Steps:**\n    1.  Create a new user account, deactivate it (e.g., through the admin panel), and then have multiple users attempt to log in simultaneously.\n\n*   **Expected Results:**\n    *   All login attempts should fail, displaying an error message indicating that the account is deactivated.\n    *   The system should not allow concurrent login attempts with a deactivated account.\n\n### 5. **Account Reactivation - Simultaneous Login Attempts**\n\n*   **Precondition:** A user account is being re-enabled (reactivated), and multiple concurrent requests to log in are made.\n*   **Description:** Test the behavior when multiple users attempt to log in while an account is being reactivated concurrently.\n*   **Test Steps:**\n    1.  Create a new user account, deactivate it (e.g., through the admin panel), then reactivate it partially and have multiple users attempt to log in simultaneously.\n\n*   **Expected Results:**\n    *   The system should allow successful login attempts once the account is fully reactivated.\n    *   An error message indicating that the account is deactivated should not be displayed for successfully logged-in users."
  }
}

@Injectable({ providedIn: "root" })
export class testCaseGenerationService {
  templateName = ""
  issueType = ""
  currentpathName = ""
  apiUrl = environment.apiUrl;
  activeVerticalId = ""

  endpointUrls: Record<string, Record<string, string>> = {
    epic: {
      "/functionalTesting/testDataCreation": "TEST_DATA_CREATION_FOR_EPIC",
      "/functionalTesting/edgeCaseAnalysis": "EDGE_CASE_PROMPT_FOR_EPIC",
      "/functionalTesting/apiTesting": "API_TEST_CASE_FOR_EPIC",
      default: "TEST_CASE_GENERATOR_FOR_EPIC",
    },
    story: {
      "/functionalTesting/testDataCreation": "TEST_DATA_CREATION_FOR_STORY",
      "/functionalTesting/edgeCaseAnalysis": "EDGE_CASE_PROMPT_FOR_STORY",
      "/functionalTesting/apiTesting": "API_TEST_CASE_FOR_STORY",
      "/functionalTesting/databaseTesting": "DATABASE_TEST_CASE_GENERATOR_FOR_STORY",
      "/automationTesting/databaseTesting": "DATABASE_TEST_SCRIPT_GENERATOR_FOR_STORY",
      "/automationTesting/customFunctions": "CODE_GENERATOR_FOR_STORY",



      default: "TEST_CASE_GENERATOR_FOR_STORY",
    },
    bug: {
      "/functionalTesting/testDataCreation": "TEST_DATA_CREATION_FOR_BUG",
      "/functionalTesting/edgeCaseAnalysis": "EDGE_CASE_PROMPT_FOR_BUG",
      "/functionalTesting/apiTesting": "API_TEST_CASE_FOR_BUG",

      default: "TEST_CASE_GENERATOR_FOR_BUG",
    }
  };

  constructor(private http: HttpClient, private router: Router, private apiService: ApiService, private authService: AuthService) {
    this.currentpathName = router.url
    this.authService.activeVertical$.subscribe(activeVertical => {
      this.activeVerticalId = activeVertical
    })
  }


  getEndpointAndKeyForSelectedTab(selectedTab: string) {

    switch (selectedTab) {
      case "epic":

        this.templateName = this.endpointUrls['epic']?.[this.currentpathName] || this.endpointUrls[selectedTab]?.["default"];

        this.issueType = "Epic";
        break;
      case "story":
        this.templateName = this.endpointUrls['story']?.[this.currentpathName] || this.endpointUrls[selectedTab]?.["default"];
        this.issueType = "Story";
        break;
      case "bug":
        this.templateName = this.endpointUrls['bug']?.[this.currentpathName] || this.endpointUrls[selectedTab]?.["default"];
        this.issueType = "Bug";
        break;
      case "testCase":
        this.templateName = "LOG_A_BUG_FOR_TEST_CASE";
        this.issueType = "test cases";
    }

  }
  getTestCaseResponse(selectedType: string, keyInputData: string[]): Observable<any> {
    this.getEndpointAndKeyForSelectedTab(selectedType)
    return this.apiService.post(`jira-projects/issue/${this.activeVerticalId}/search?issueType=${this.issueType}&templateName=${this.templateName}`, keyInputData)
    // if (selectedType == 'epic') {
    //   return of(epicsampleResponse)
    // }
    // return of(sampleresponse)
  }

  getTestCasesWithTextForCodeGeneration(prompt: string) {
    console.log('=== Starting getTestCasesWithTextForCodeGeneration ===');
    console.log('Input prompt:', prompt);

    const requestBody = {
      text: prompt
    };

    console.log('Request body:', JSON.stringify(requestBody, null, 2));
    console.log('Active Vertical ID:', this.activeVerticalId);

    const endpoint = `test-cases/${this.activeVerticalId}/generate`;
    console.log('API Endpoint:', endpoint);

    console.log('Sending request to backend...');
    const startTime = performance.now();

    return this.apiService.post(endpoint, requestBody).pipe(
      tap({
        next: (response: any) => {
          const endTime = performance.now();
          console.log('=== API Response ===');
          console.log('Status: Success');
          console.log('Response Time:', (endTime - startTime).toFixed(2), 'ms');
          console.log('Response Data:', response);
        },
        error: (error: HttpErrorResponse) => {
          const endTime = performance.now();
          console.error('=== API Error ===');
          console.error('Error after', (endTime - startTime).toFixed(2), 'ms');
          console.error('Error:', error);
          console.error('Error Status:', error.status);
          console.error('Error Message:', error.message);
        },
        complete: () => {
          console.log('=== API Call Completed ===');
        }
      }),
      map((response: any) => {
        const aiResponse = response?.response || "No response received";
        console.log('Processed AI Response:', aiResponse);
        return aiResponse;
      }),
      catchError((error: HttpErrorResponse) => {
        console.error('Error in processing response:', error);
        return of("Error processing AI response. Please try again.");
      })
    );
  }
}